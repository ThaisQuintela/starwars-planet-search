{"version":3,"sources":["images/star-wars-logo.svg","images/Star_Wars_silhouette_Olly_Moss_artwork.jpg","context/StarWarsContext.js","components/Table/index.js","components/FilterForm/index.js","components/Loading/index.js","App.js","services/api.js","context/Provider.js","serviceWorker.js","index.js"],"names":["module","exports","StarWarsContext","createContext","Table","useContext","filters","filterByNumericValue","filmData","charData","filterByName","filter","planet","name","toLowerCase","includes","className","map","index","key","data-testid","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","film","length","title","residents","char","replace","FilterForm","planetData","setFilters","setFilterByNumericValue","usedColumnFilters","filterByNumericValues","item","column","newColumnFilter","filterIteration","comparison","parseInt","value","useEffect","htmlFor","id","onChange","target","filterByResidentName","resident","type","onClick","numericValues","document","getElementById","concat","handleCLick","disabled","deleteFilter","Loading","useLottie","renderer","rendererSettings","preserveAspectRatio","progressiveLoad","animationData","lottieRef","src","logo","alt","App","isLoading","starwars","planetUrls","fetchData","a","promises","url","fetch","requestData","json","data","results","Promise","all","StarWarsData","finalResult","flat","filmsData","charactersUrls","fetchCharactersData","requestCharactersData","charactersData","splice","Provider","children","useState","setIsLoading","setPlanetData","setFilmData","setCharData","order","sort","getPlanetData","getFilmData","getCharData","contextValue","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60206ab9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.2db77352.svg\";","module.exports = __webpack_public_path__ + \"static/media/Star_Wars_silhouette_Olly_Moss_artwork.3b06afbb.jpg\";","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../../context/StarWarsContext';\n\nfunction Table() {\n  const {\n    filters, filterByNumericValue, filmData, charData,\n  } = useContext(StarWarsContext);\n\n  const filterByName = filterByNumericValue\n    .filter((planet) => planet.name.toLowerCase()\n      .includes(filters.filterByName.name.toLowerCase()));\n\n  return (\n    <table\n      className=\"table table-responsive table-sm align-middle table-hover text-center\"\n    >\n      <thead className=\"border-0\">\n        <tr className=\"align-middle\">\n          <th>Name</th>\n          <th>Rotation Period</th>\n          <th>Orbital Period</th>\n          <th>Diameter</th>\n          <th>Climate</th>\n          <th>Gravity</th>\n          <th>Terrain</th>\n          <th>Surface Water</th>\n          <th>Population</th>\n          <th>Films</th>\n          <th>Residents</th>\n        </tr>\n      </thead>\n      <tbody>\n        {filterByName.map((planet, index) => (\n          <tr key={ index } className=\"border-bottom border-secondary\">\n            <td data-testid=\"planet-name\" className=\"fw-bold\">{planet.name}</td>\n            <td>{planet.rotation_period}</td>\n            <td>{planet.orbital_period}</td>\n            <td>{planet.diameter}</td>\n            <td>{planet.climate}</td>\n            <td>{planet.gravity}</td>\n            <td>{planet.terrain}</td>\n            <td>{planet.surface_water}</td>\n            <td>{planet.population}</td>\n            <td>\n              {(planet.films).map(\n                (film) => ` - ${filmData[(film[film.length - 2]) - 1].title}`,\n              )}\n            </td>\n            <td>\n              {(planet.residents).map(\n                (char) => ` - ${charData[(char.replace('https://swapi-trybe.herokuapp.com/api/people/', '')\n                  .replace('/', '')) - 1].name}`,\n              )}\n            </td>\n          </tr>))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext, useEffect } from 'react';\nimport StarWarsContext from '../../context/StarWarsContext';\n\nfunction FilterForm() {\n  const {\n    planetData, filters, setFilters, setFilterByNumericValue,\n  } = useContext(StarWarsContext);\n\n  const columnFilter = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const usedColumnFilters = filters.filterByNumericValues.map((item) => item.column);\n  const newColumnFilter = columnFilter.filter((column) => !usedColumnFilters\n    .includes(column));\n  // https://stackoverflow.com/questions/34901593/how-to-filter-an-array-from-all-elements-of-another-array\n\n  const comparisonFilter = ['bigger than', 'less than', 'equal to'];\n\n  function handleCLick() {\n    const numericValues = filters.filterByNumericValues;\n    const column = document.getElementById('column').value;\n    const comparison = document.getElementById('comparison').value;\n    const { value } = document.getElementById('value');\n    const filterByNumericValues = numericValues.concat({ column, comparison, value });\n    setFilters({ ...filters, filterByNumericValues });\n  }\n\n  let filterIteration = planetData;\n  if (filters.filterByNumericValues.length > 0) {\n    filters.filterByNumericValues.map((filter) => {\n      if (filter.comparison === 'bigger than') {\n        filterIteration = filterIteration.filter(\n          (planet) => parseInt(planet[filter.column], 10) > parseInt(filter.value, 10),\n        );\n      } if (filter.comparison === 'less than') {\n        filterIteration = filterIteration.filter(\n          (planet) => parseInt(planet[filter.column], 10) < parseInt(filter.value, 10),\n        );\n      } if (filter.comparison === 'equal to') {\n        filterIteration = filterIteration.filter(\n          (planet) => parseInt(planet[filter.column], 10) === parseInt(filter.value, 10),\n        );\n      }\n      return filterIteration;\n    });\n  }\n\n  function deleteFilter(filter) {\n    const filterByNumericValues = filters.filterByNumericValues\n      .filter((item) => item.column !== filter.column);\n    setFilters({ ...filters, filterByNumericValues });\n  }\n\n  useEffect(() => {\n    setFilterByNumericValue(filterIteration);\n  }, [filters.filterByNumericValues]);\n\n  function checkValidity() {\n    if (newColumnFilter.length === 0) return true;\n    return false;\n  }\n\n  /* function columnSort() {\n\n  } */\n\n  return (\n    <header className=\"filters container-fluid py-3 d-flex justify-content-center\">\n      <form>\n        <span className=\"ms-2 fw-bold\">Filter by:</span>\n        <label\n          htmlFor=\"name-filter\"\n          className=\"form-label mx-3 d-inline-flex align-items-center text-nowrap\"\n        >\n          Planet name:\n          <input\n            className=\"form-control form-control-sm ms-2\"\n            name=\"name-filter\"\n            id=\"name-filter\"\n            data-testid=\"name-filter\"\n            onChange={ ({ target: { value } }) => setFilters(\n              { ...filters, filterByName: { name: value } },\n            ) }\n          />\n        </label>\n        <label\n          htmlFor=\"resident-filter\"\n          className=\"form-label mx-2 d-inline-flex align-items-center text-nowrap\"\n        >\n          Resident name:\n          <input\n            className=\"form-control form-control-sm ms-2\"\n            name=\"resident-filter\"\n            id=\"resident-filter\"\n            onChange={ ({ target: { value } }) => setFilters(\n              { ...filters, filterByResidentName: { resident: value } },\n            ) }\n          />\n        </label>\n        <div className=\"d-flex align-items-center mt-2\">\n          <label\n            htmlFor=\"column\"\n            className=\"form-label mx-2 my-0 d-flex align-items-center\"\n          >\n            <span>Column:</span>\n            <select\n              className=\"form-select form-select-sm ms-2\"\n              name=\"column\"\n              id=\"column\"\n              data-testid=\"column-filter\"\n            >\n              {newColumnFilter.map(\n                (column) => <option key={ column }>{ column }</option>,\n              )}\n            </select>\n          </label>\n          <label\n            htmlFor=\"comparison\"\n            className=\"form-label mx-2 my-0 d-flex align-items-center\"\n          >\n            Comparison:\n            <select\n              className=\"form-select form-select-sm ms-2\"\n              name=\"comparison\"\n              id=\"comparison\"\n              data-testid=\"comparison-filter\"\n            >\n              { comparisonFilter.map((item) => <option key={ item }>{ item }</option>) }\n            </select>\n          </label>\n          <label\n            htmlFor=\"value\"\n            className=\"form-label mx-2 my-0 d-flex w-25 align-items-center\"\n          >\n            Value:\n            <input\n              className=\"form-control form-control-sm ms-2\"\n              type=\"number\"\n              name=\"value\"\n              id=\"value\"\n              data-testid=\"value-filter\"\n            />\n          </label>\n          <button\n            className=\"btn btn-sm btn-light mx-2\"\n            type=\"button\"\n            data-testid=\"button-filter\"\n            onClick={ () => handleCLick() }\n            disabled={ checkValidity() }\n          >\n            Filter\n          </button>\n        </div>\n        <label\n          htmlFor=\"column-sort\"\n          className=\"form-label mt-3 mx-2 d-flex align-items-center text-nowrap\"\n        >\n          <span className=\"fw-bold\">Order by:</span>\n          <select\n            className=\"form-select form-select-sm mx-2 w-25\"\n            name=\"column-sort\"\n            id=\"column-sort\"\n            data-testid=\"column-sort\"\n          >\n            <option>Name</option>\n            <option>Rotation Period</option>\n            <option>Orbital Period</option>\n            <option>Diameter</option>\n            <option>Surface Water</option>\n            <option>Population</option>\n          </select>\n          <label htmlFor=\"ASC\" className=\"form-label d-flex my-0\">\n            ASC\n            <input\n              className=\"form-check-input mx-2\"\n              type=\"radio\"\n              id=\"ASC\"\n              name=\"column-sort\"\n              value=\"ASC\"\n              data-testid=\"column-sort-input-asc\"\n            />\n          </label>\n          <label htmlFor=\"DESC\" className=\"form-label d-flex my-0\">\n            DESC\n            <input\n              className=\"form-check-input mx-2\"\n              type=\"radio\"\n              id=\"DESC\"\n              name=\"column-sort\"\n              value=\"DESC\"\n              data-testid=\"column-sort-input-desc\"\n            />\n          </label>\n          <button\n            className=\"btn btn-sm btn-light mx-2\"\n            type=\"button\"\n            data-testid=\"column-sort-button\"\n          //  onClick={ columnSort() }\n          >\n            Sort\n          </button>\n        </label>\n      </form>\n      <div className=\"filter-box bg-light border rounded px-3 py-1 m-1 w-25\">\n        <p className=\"text-center py-1 m-0 fw-bold\">Used filters:</p>\n        { filters.filterByNumericValues.map((item, index) => (\n          <div data-testid=\"filter\" className=\"d-flex ms-3\" id={ index } key={ index }>\n            <span className=\"me-auto align-self-center\">\n              { `${item.column} ${item.comparison} ${item.value}` }\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-sm btn-warning mb-1 mx-2\"\n              onClick={ () => deleteFilter(item) }\n            >\n              <i className=\"bi bi-x-lg\" />\n            </button>\n          </div>)) }\n      </div>\n    </header>\n  );\n}\n\nexport default FilterForm;\n","import React from 'react';\nimport { useLottie, Lottie } from 'react-lottie-hook';\nimport animationData from '../../lottie/82-rey-updated.json';\nimport logo from '../../images/star-wars-logo.svg';\n\nfunction Loading() {\n  const [lottieRef] = useLottie({\n    renderer: 'svg',\n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice',\n      progressiveLoad: false,\n    },\n    animationData,\n  });\n\n  return (\n    <div>\n      <Lottie lottieRef={ lottieRef } className=\"vw-100 vh-100\" />\n      <img src={ logo } alt=\"Logo Star Wars\" className=\"loading-logo h-75 w-50 m-auto\" />\n    </div>\n  );\n}\n\nexport default Loading;\n","import React, { useContext } from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport FilterForm from './components/FilterForm';\nimport starwars from './images/Star_Wars_silhouette_Olly_Moss_artwork.jpg';\nimport StarWarsContext from './context/StarWarsContext';\nimport logo from './images/star-wars-logo.svg';\nimport Loading from './components/Loading';\n\nfunction App() {\n  const { isLoading } = useContext(StarWarsContext);\n\n  return (\n    isLoading ? <Loading />\n      : (\n        <main>\n          <img src={ logo } alt=\"Logo Star Wars\" className=\"logo\" />\n          <img src={ starwars } alt=\"Jedi\" className=\"starwars\" />\n          <FilterForm />\n          <Table />\n        </main>\n      )\n  );\n}\n\nexport default App;\n","// https://oieduardorabelo.medium.com/javascript-armadilhas-do-asyn-await-em-loops-1cdad44db7f0\n// https://stackoverflow.com/questions/42489918/async-await-inside-arraymap\nconst planetUrls = [\n  'https://swapi-trybe.herokuapp.com/api/planets/?page=1',\n  'https://swapi-trybe.herokuapp.com/api/planets/?page=2',\n  'https://swapi-trybe.herokuapp.com/api/planets/?page=3',\n  'https://swapi-trybe.herokuapp.com/api/planets/?page=4',\n  'https://swapi-trybe.herokuapp.com/api/planets/?page=5',\n  'https://swapi-trybe.herokuapp.com/api/planets/?page=6',\n];\n\nasync function fetchData() {\n  const promises = planetUrls.map(async (url) => {\n    const requestData = await fetch(url);\n    const data = await requestData.json();\n    return data.results;\n  });\n  return Promise.all(promises);\n}\n\nexport const StarWarsData = async () => {\n  const results = await fetchData();\n  const finalResult = results.flat();\n  return finalResult;\n};\n\nexport const filmsData = async () => {\n  const requestData = await fetch('https://swapi-trybe.herokuapp.com/api/films/');\n  const { results } = await requestData.json();\n  return results;\n};\n\nconst charactersUrls = [\n  'https://swapi-trybe.herokuapp.com/api/people/?page=1',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=2',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=3',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=4',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=5',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=6',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=7',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=8',\n  'https://swapi-trybe.herokuapp.com/api/people/?page=9',\n];\n\nasync function fetchCharactersData() {\n  const promises = charactersUrls.map(async (url) => {\n    const requestCharactersData = await fetch(url);\n    const data = await requestCharactersData.json();\n    return data.results;\n  });\n  return Promise.all(promises);\n}\n\nconst SEVENTEEN = 17;\nexport const charactersData = async () => {\n  const results = await fetchCharactersData();\n  const finalResult = results.flat();\n  // solve the problem with non-existent characters\n  finalResult.splice(SEVENTEEN, 0, '');\n  return finalResult;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport { StarWarsData, filmsData, charactersData } from '../services/api';\n\nfunction Provider({ children }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [planetData, setPlanetData] = useState([]);\n  const [filmData, setFilmData] = useState([]);\n  const [charData, setCharData] = useState([]);\n  const [filters, setFilters] = useState(\n    {\n      filterByName: {\n        name: '',\n      },\n      filterByResidentName: {\n        resident: '',\n      },\n      filterByNumericValues: [],\n      order: {\n        column: 'Name',\n        sort: 'ASC',\n      },\n    },\n  );\n  const [filterByNumericValue, setFilterByNumericValue] = useState([]);\n\n  async function fetchData() {\n    setIsLoading(true);\n    const getPlanetData = await StarWarsData();\n    setPlanetData(getPlanetData);\n    const getFilmData = await filmsData();\n    setFilmData(getFilmData);\n    const getCharData = await charactersData();\n    setCharData(getCharData);\n    setFilterByNumericValue(getPlanetData);\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const contextValue = {\n    isLoading,\n    planetData,\n    filmData,\n    charData,\n    filters,\n    setFilters,\n    filterByNumericValue,\n    setFilterByNumericValue,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ contextValue }>\n      { children }\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Provider from './context/Provider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}