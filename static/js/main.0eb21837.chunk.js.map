{"version":3,"sources":["context/StarWarsContext.js","components/Table/index.js","components/FilterForm/index.js","services/api.js","context/Provider.js","App.js","index.js"],"names":["StarWarsContext","createContext","Table","useContext","isLoading","filters","filterByName","filterByNumericValue","filter","planet","name","toLowerCase","includes","map","index","key","data-testid","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","FilterForm","data","setFilters","setFilterByNumericValue","usedColumnFilters","filterByNumericValues","item","column","newColumnFilter","filterIteration","length","comparison","parseInt","value","useEffect","htmlFor","id","onChange","target","type","onClick","numericValues","document","getElementById","concat","handleCLick","disabled","deleteFilter","StarWarsData","a","fetch","requestData","json","results","Provider","children","useState","setIsLoading","setData","order","sort","getData","fetchPlanetData","contextValue","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.0eb21837.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../../context/StarWarsContext';\n\nfunction Table() {\n  const { isLoading, filters, filterByNumericValue } = useContext(StarWarsContext);\n\n  const filterByName = filterByNumericValue\n    .filter((planet) => planet.name.toLowerCase()\n      .includes(filters.filterByName.name.toLowerCase()));\n\n  return (\n    isLoading ? 'Loading'\n      : (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Rotation Period</th>\n              <th>Orbital Period</th>\n              <th>Diameter</th>\n              <th>Climate</th>\n              <th>Gravity</th>\n              <th>Terrain</th>\n              <th>Surface Water</th>\n              <th>Population</th>\n              <th>Films</th>\n              <th>Created</th>\n              <th>Edited</th>\n              <th>URL</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filterByName.map((planet, index) => (\n              <tr key={ index }>\n                <td data-testid=\"planet-name\">{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.orbital_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n                <td>{planet.population}</td>\n                <td>{planet.films}</td>\n                <td>{planet.created}</td>\n                <td>{planet.edited}</td>\n                <td>{planet.url}</td>\n              </tr>))}\n          </tbody>\n        </table>\n      )\n  );\n}\n\nexport default Table;\n","import React, { useContext, useEffect } from 'react';\nimport StarWarsContext from '../../context/StarWarsContext';\n\nfunction FilterForm() {\n  const {\n    data, filters, setFilters, setFilterByNumericValue,\n  } = useContext(StarWarsContext);\n\n  const columnFilter = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const usedColumnFilters = filters.filterByNumericValues.map((item) => item.column);\n  const newColumnFilter = columnFilter.filter((column) => !usedColumnFilters\n    .includes(column));\n  // https://stackoverflow.com/questions/34901593/how-to-filter-an-array-from-all-elements-of-another-array\n\n  const comparisonFilter = ['maior que', 'menor que', 'igual a'];\n\n  function handleCLick() {\n    const numericValues = filters.filterByNumericValues;\n    const column = document.getElementById('column').value;\n    const comparison = document.getElementById('comparison').value;\n    const { value } = document.getElementById('value');\n    const filterByNumericValues = numericValues.concat({ column, comparison, value });\n    setFilters({ ...filters, filterByNumericValues });\n  }\n\n  let filterIteration = data;\n  if (filters.filterByNumericValues.length > 0) {\n    filters.filterByNumericValues.map((filter) => {\n      if (filter.comparison === 'maior que') {\n        filterIteration = filterIteration.filter(\n          (planet) => parseInt(planet[filter.column], 10) > parseInt(filter.value, 10),\n        );\n      } if (filter.comparison === 'menor que') {\n        filterIteration = filterIteration.filter(\n          (planet) => parseInt(planet[filter.column], 10) < parseInt(filter.value, 10),\n        );\n      } if (filter.comparison === 'igual a') {\n        filterIteration = filterIteration.filter(\n          (planet) => parseInt(planet[filter.column], 10) === parseInt(filter.value, 10),\n        );\n      }\n      return filterIteration;\n    });\n  }\n\n  function deleteFilter(filter) {\n    const filterByNumericValues = filters.filterByNumericValues\n      .filter((item) => item.column !== filter.column);\n    setFilters({ ...filters, filterByNumericValues });\n  }\n\n  useEffect(() => {\n    setFilterByNumericValue(filterIteration);\n  }, [filters.filterByNumericValues]);\n\n  function checkValidity() {\n    if (newColumnFilter.length === 0) return true;\n    return false;\n  }\n\n  /* function columnSort() {\n\n  } */\n\n  return (\n    <header>\n      <form>\n        <label htmlFor=\"name-filter\">\n          Planet name:\n          <input\n            name=\"name-filter\"\n            id=\"name-filter\"\n            data-testid=\"name-filter\"\n            onChange={ ({ target: { value } }) => setFilters(\n              { ...filters, filterByName: { name: value } },\n            ) }\n          />\n        </label>\n        <label htmlFor=\"column\">\n          Column:\n          <select\n            name=\"column\"\n            id=\"column\"\n            data-testid=\"column-filter\"\n          >\n            {newColumnFilter.map((column) => <option key={ column }>{ column }</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"comparison\">\n          Comparison:\n          <select\n            name=\"comparison\"\n            id=\"comparison\"\n            data-testid=\"comparison-filter\"\n          >\n            { comparisonFilter.map((item) => <option key={ item }>{ item }</option>) }\n          </select>\n        </label>\n        <label htmlFor=\"value\">\n          Value:\n          <input\n            type=\"number\"\n            name=\"value\"\n            id=\"value\"\n            data-testid=\"value-filter\"\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ () => handleCLick() }\n          disabled={ checkValidity() }\n        >\n          Filter\n        </button>\n        <label htmlFor=\"column-sort\">\n          Oyder by:\n          <select name=\"column-sort\" id=\"column-sort\" data-testid=\"column-sort\">\n            <option>Name</option>\n            <option>Rotation Period</option>\n            <option>Orbital Period</option>\n            <option>Diameter</option>\n            <option>Surface Water</option>\n            <option>Population</option>\n          </select>\n          <label htmlFor=\"ASC\">\n            ASC\n            <input\n              type=\"radio\"\n              id=\"ASC\"\n              name=\"column-sort\"\n              value=\"ASC\"\n              data-testid=\"column-sort-input-asc\"\n            />\n          </label>\n          <label htmlFor=\"DESC\">\n            DESC\n            <input\n              type=\"radio\"\n              id=\"DESC\"\n              name=\"column-sort\"\n              value=\"DESC\"\n              data-testid=\"column-sort-input-desc\"\n            />\n          </label>\n          <button\n            type=\"button\"\n            data-testid=\"column-sort-button\"\n          //  onClick={ columnSort() }\n          >\n            Sort\n          </button>\n        </label>\n      </form>\n      { filters.filterByNumericValues.map((item, index) => (\n        <div data-testid=\"filter\" id={ index } key={ index }>\n          <span>\n            { `${item.column} ${item.comparison} ${item.value}` }\n          </span>\n          <button type=\"button\" onClick={ () => deleteFilter(item) }>X</button>\n        </div>)) }\n    </header>\n  );\n}\n\nexport default FilterForm;\n","const StarWarsData = async () => {\n  const requestData = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n  const { results } = await requestData.json();\n  return results;\n};\n\nexport default StarWarsData;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport StarWarsData from '../services/api';\n\nfunction Provider({ children }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState(\n    {\n      filterByName: {\n        name: '',\n      },\n      filterByNumericValues: [],\n      order: {\n        column: 'Name',\n        sort: 'ASC',\n      },\n    },\n  );\n  const [filterByNumericValue, setFilterByNumericValue] = useState([]);\n\n  async function fetchPlanetData() {\n    setIsLoading(true);\n    const getData = await StarWarsData();\n    setData(getData);\n    setFilterByNumericValue(getData);\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    fetchPlanetData();\n  }, []);\n\n  const contextValue = {\n    isLoading,\n    data,\n    filters,\n    setFilters,\n    filterByNumericValue,\n    setFilterByNumericValue,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ contextValue }>\n      { children }\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport FilterForm from './components/FilterForm';\nimport Provider from './context/Provider';\n\nfunction App() {\n  return (\n    <Provider>\n      <main>\n        <span>Hello, App!</span>\n        <FilterForm />\n        <Table />\n      </main>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}